// <auto-generated />
using System;
using HR_Portal.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HR_Portal.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220205104917_start")]
    partial class start
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HR_Portal.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"), 1L, 1);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DirectorId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentId");

                    b.HasIndex("DirectorId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            DepartmentName = "Human Resources"
                        },
                        new
                        {
                            DepartmentId = 2,
                            DepartmentName = "IT Support"
                        },
                        new
                        {
                            DepartmentId = 3,
                            DepartmentName = "Accounting and Finance"
                        });
                });

            modelBuilder.Entity("HR_Portal.Models.Position", b =>
                {
                    b.Property<int?>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("PositionId"), 1L, 1);

                    b.Property<decimal?>("BaseSalary")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PositionId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            PositionId = 1,
                            BaseSalary = 3500m,
                            DepartmentId = 1,
                            PositionName = "HR Manager"
                        },
                        new
                        {
                            PositionId = 2,
                            BaseSalary = 3900m,
                            DepartmentId = 1,
                            PositionName = "Business Partner"
                        },
                        new
                        {
                            PositionId = 3,
                            BaseSalary = 4000m,
                            DepartmentId = 2,
                            PositionName = "Team Leader"
                        },
                        new
                        {
                            PositionId = 4,
                            BaseSalary = 3700m,
                            DepartmentId = 2,
                            PositionName = "IT Support Specialist"
                        },
                        new
                        {
                            PositionId = 5,
                            BaseSalary = 3400m,
                            DepartmentId = 3,
                            PositionName = "Main Accountant"
                        },
                        new
                        {
                            PositionId = 6,
                            BaseSalary = 3500m,
                            DepartmentId = 3,
                            PositionName = "Finnancial Controller"
                        });
                });

            modelBuilder.Entity("HR_Portal.Models.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestTypeId")
                        .HasColumnType("int");

                    b.Property<int>("RequestorId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("RequestorId");

                    b.HasIndex("StatusId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("HR_Portal.Models.RequestStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"), 1L, 1);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("RequestStatuses");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            StatusName = "Pending Manager Approval"
                        },
                        new
                        {
                            StatusId = 2,
                            StatusName = "Pending HR Confirmation"
                        },
                        new
                        {
                            StatusId = 3,
                            StatusName = "Rejected"
                        },
                        new
                        {
                            StatusId = 4,
                            StatusName = "Approved"
                        });
                });

            modelBuilder.Entity("HR_Portal.Models.RequestType", b =>
                {
                    b.Property<int>("RequestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestTypeId"), 1L, 1);

                    b.Property<string>("AdditionalDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestTypeId");

                    b.ToTable("RequestTypes");

                    b.HasData(
                        new
                        {
                            RequestTypeId = 1,
                            AdditionalDetails = "Select dates when you want to take days off.",
                            RequestName = "Take Day Off"
                        },
                        new
                        {
                            RequestTypeId = 2,
                            AdditionalDetails = "Select dates for sick Leave. Remember to send medical document to HR Person.",
                            RequestName = "Report Sickness"
                        },
                        new
                        {
                            RequestTypeId = 3,
                            AdditionalDetails = "Select dates when you want to have vacation.",
                            RequestName = "Create Vacation Plan"
                        },
                        new
                        {
                            RequestTypeId = 4,
                            AdditionalDetails = "Select delegation date, costs which are on you, plece where you been.",
                            RequestName = "Report Delegation"
                        },
                        new
                        {
                            RequestTypeId = 5,
                            AdditionalDetails = "Provide data, that you would like to change.",
                            RequestName = "Change Personal Data"
                        });
                });

            modelBuilder.Entity("HR_Portal.Models.Training", b =>
                {
                    b.Property<int>("TrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainingId"), 1L, 1);

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainingType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrainingId");

                    b.ToTable("Trainings");

                    b.HasData(
                        new
                        {
                            TrainingId = 1,
                            Cost = 0m,
                            Description = "Safety training for new workers",
                            TrainingName = "Workplace Safety",
                            TrainingType = "Internal"
                        },
                        new
                        {
                            TrainingId = 2,
                            Cost = 500m,
                            Description = "These skills are useful for both new and old employees, and they play a vital role in building a respectful, collaborative, and efficient culture within a company.",
                            TrainingName = "Soft Skills Development",
                            TrainingType = "External"
                        },
                        new
                        {
                            TrainingId = 3,
                            Cost = 0m,
                            Description = "Technical skills training is a basic component of employee education. It is a primary way for you to develop the skills you need in your role.",
                            TrainingName = "Technical skills development",
                            TrainingType = "Internal"
                        },
                        new
                        {
                            TrainingId = 4,
                            Cost = 0m,
                            Description = " Quality training refers to familiarizing employees with the means of preventing, detecting, and eliminating non-quality items.",
                            TrainingName = "Quality training",
                            TrainingType = "Internal"
                        },
                        new
                        {
                            TrainingId = 5,
                            Cost = 500m,
                            Description = "Leadership and management training courses are specialized programs designed to help you learn new leadership techniques and refine old skills to run your team, including assertive communication, motivation methods, and coaching.",
                            TrainingName = "Leadership Training",
                            TrainingType = "External"
                        },
                        new
                        {
                            TrainingId = 6,
                            Cost = 0m,
                            Description = "Safety training for new workers",
                            TrainingName = "Workplace Safety",
                            TrainingType = "Internal"
                        },
                        new
                        {
                            TrainingId = 7,
                            Cost = 700m,
                            Description = "Learn what's possible with Word, Excel, and PowerPoint.",
                            TrainingName = "Microsoft 365 Training",
                            TrainingType = "External"
                        },
                        new
                        {
                            TrainingId = 8,
                            Cost = 400m,
                            Description = "Sales programs can help you and your team better prepare and execute your sales plan. When signing up for a sales training program, you can expect a range of resources designed to help participants learn the strategies that turn prospects into customers",
                            TrainingName = "Sales Training",
                            TrainingType = "External"
                        },
                        new
                        {
                            TrainingId = 9,
                            Cost = 600m,
                            Description = "Learning another language provides many other benefits including greater academic achievement, greater cognitive development, and more positive attitudes towards other languages and cultures. You can choose french, deutch, spanish and russian",
                            TrainingName = "Language Training",
                            TrainingType = "External"
                        },
                        new
                        {
                            TrainingId = 10,
                            Cost = 0m,
                            Description = "Diversity training is a program designed to facilitate positive intergroup interaction, reduce prejudice and discrimination, and generally teach individuals who are different from others how to work together effectively.",
                            TrainingName = "Diversity Training",
                            TrainingType = "Internal"
                        });
                });

            modelBuilder.Entity("HR_Portal.Models.TrainingDestination", b =>
                {
                    b.Property<int>("DestinationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DestinationId"), 1L, 1);

                    b.Property<int?>("Progress")
                        .HasColumnType("int");

                    b.Property<int>("TrainingId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DestinationId");

                    b.HasIndex("TrainingId");

                    b.HasIndex("UserId");

                    b.ToTable("TrainingDestinations");
                });

            modelBuilder.Entity("HR_Portal.Models.User", b =>
                {
                    b.Property<int?>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("UserId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("Date");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SalaryBonus")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("VacationDays")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("PositionId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 0,
                            Address = "Address line 1  \r\n Address line 2 ",
                            BankAccount = "00000000000000000000",
                            CreationDate = new DateTime(2022, 1, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2000, 10, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentId = "0000000000",
                            FirstName = "Kamil",
                            Gender = "Male",
                            LastName = "Szczypczyk",
                            ManagerId = 0,
                            PositionId = 4,
                            SalaryBonus = 0m,
                            VacationDays = 24
                        },
                        new
                        {
                            UserId = 1,
                            Address = "Krakowska 13  \r\n 30-156 Krakow ",
                            BankAccount = "99876543211234567890",
                            CreationDate = new DateTime(2017, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1987, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentId = "11223344550",
                            FirstName = "Piotr",
                            Gender = "Male",
                            LastName = "Pawlowski",
                            ManagerId = 2,
                            PositionId = 4,
                            SalaryBonus = 300m,
                            VacationDays = 24
                        },
                        new
                        {
                            UserId = 2,
                            Address = "Warszawska 31 \r\n 31-651 Krakow ",
                            BankAccount = "12345678900987654321",
                            CreationDate = new DateTime(2010, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1990, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentId = "1237896541",
                            FirstName = "Pawel",
                            Gender = "Male",
                            LastName = "Piotrowski",
                            ManagerId = 2,
                            PositionId = 3,
                            SalaryBonus = 700m,
                            VacationDays = 22
                        },
                        new
                        {
                            UserId = 3,
                            Address = "Aleja Jana Pawla II 99 \r\n 31-887 Krakow ",
                            BankAccount = "1300982287450662",
                            CreationDate = new DateTime(2015, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1982, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentId = "6669998766",
                            FirstName = "Magda",
                            Gender = "Female",
                            LastName = "Konieczna",
                            ManagerId = 4,
                            PositionId = 2,
                            SalaryBonus = 700m,
                            VacationDays = 26
                        },
                        new
                        {
                            UserId = 4,
                            Address = "Skawinska 18/6 \r\n 29-119 Krakow ",
                            BankAccount = "67838164462801977",
                            CreationDate = new DateTime(2018, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1989, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentId = "5558880098",
                            FirstName = "Karolina",
                            Gender = "Female",
                            LastName = "Siekiera",
                            ManagerId = 4,
                            PositionId = 1,
                            SalaryBonus = 150m,
                            VacationDays = 21
                        },
                        new
                        {
                            UserId = 5,
                            Address = "Sloneczna 12/3  \r\n 30-156 Krakow ",
                            BankAccount = "9887718233092343",
                            CreationDate = new DateTime(2017, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1985, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentId = "1234765126",
                            FirstName = "Filip",
                            Gender = "Male",
                            LastName = "Nowak",
                            ManagerId = 2,
                            PositionId = 4,
                            SalaryBonus = 200m,
                            VacationDays = 23
                        },
                        new
                        {
                            UserId = 6,
                            Address = "Modrzewiowa 8/1  \r\n 30-221 Krakow ",
                            BankAccount = "2213464679643220",
                            CreationDate = new DateTime(2014, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1991, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentId = "3517792018",
                            FirstName = "Anna",
                            Gender = "Female",
                            LastName = "Wesola",
                            ManagerId = 6,
                            PositionId = 5,
                            SalaryBonus = 600m,
                            VacationDays = 24
                        },
                        new
                        {
                            UserId = 7,
                            Address = "Wielicka 234  \r\n 31-186 Krakow ",
                            BankAccount = "964678826543300",
                            CreationDate = new DateTime(2017, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1990, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentId = "654327876",
                            FirstName = "Kamila",
                            Gender = "Female",
                            LastName = "Niedzielska",
                            ManagerId = 6,
                            PositionId = 6,
                            SalaryBonus = 300m,
                            VacationDays = 24
                        },
                        new
                        {
                            UserId = 8,
                            Address = "Jerzmanowskiego 28/22  \r\n 30-386 Krakow ",
                            BankAccount = "74783654442894652",
                            CreationDate = new DateTime(2018, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1989, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentId = "98765442212",
                            FirstName = "Emil",
                            Gender = "Male",
                            LastName = "Balon",
                            ManagerId = 6,
                            PositionId = 6,
                            SalaryBonus = 200m,
                            VacationDays = 22
                        },
                        new
                        {
                            UserId = 9,
                            Address = "Kozia 3  \r\n 30-216 Krakow ",
                            BankAccount = "435682998567737542",
                            CreationDate = new DateTime(2020, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2000, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentId = "6543677873",
                            FirstName = "Wiktor",
                            Gender = "Male",
                            LastName = "Gniewny",
                            ManagerId = 3,
                            PositionId = 2,
                            SalaryBonus = 100m,
                            VacationDays = 18
                        },
                        new
                        {
                            UserId = 10,
                            Address = "Kurza 18  \r\n 31-642 Krakow ",
                            BankAccount = "545267289986552213",
                            CreationDate = new DateTime(2019, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1994, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentId = "645332788",
                            FirstName = "Angelina",
                            Gender = "Female",
                            LastName = "Kowalska",
                            ManagerId = 5,
                            PositionId = 4,
                            SalaryBonus = 100m,
                            VacationDays = 19
                        },
                        new
                        {
                            UserId = 11,
                            Address = "Rzozowska 4/8  \r\n 30-678 Krakow ",
                            BankAccount = "5562891093544427911",
                            CreationDate = new DateTime(2018, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1992, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentId = "342578655",
                            FirstName = "Hubert",
                            Gender = "Male",
                            LastName = "Dziurski",
                            ManagerId = 8,
                            PositionId = 6,
                            SalaryBonus = 250m,
                            VacationDays = 23
                        },
                        new
                        {
                            UserId = 12,
                            Address = "Rzeszowska 8 \r\n 30-334 Krakow ",
                            BankAccount = "9455452678927665532",
                            CreationDate = new DateTime(2021, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1997, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentId = "765432124",
                            FirstName = "Kamil",
                            Gender = "Male",
                            LastName = "Rutkowski",
                            ManagerId = 1,
                            PositionId = 4,
                            SalaryBonus = 100m,
                            VacationDays = 18
                        },
                        new
                        {
                            UserId = 13,
                            Address = "Ciekawska 3 \r\n 30-082 Krakow ",
                            BankAccount = "25544377815455499223",
                            CreationDate = new DateTime(2017, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1997, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentId = "6543213335",
                            FirstName = "Tomasz",
                            Gender = "Male",
                            LastName = "Lajdak",
                            ManagerId = 7,
                            PositionId = 6,
                            SalaryBonus = 100m,
                            VacationDays = 20
                        },
                        new
                        {
                            UserId = 14,
                            Address = "Szlachetna 2  \r\n 30-563 Krakow ",
                            BankAccount = "45562899846541133344",
                            CreationDate = new DateTime(2017, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1990, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentId = "6543322674",
                            FirstName = "Julian",
                            Gender = "Male",
                            LastName = "Krolewski",
                            ManagerId = 2,
                            PositionId = 4,
                            SalaryBonus = 200m,
                            VacationDays = 20
                        },
                        new
                        {
                            UserId = 15,
                            Address = "Zywiecka 11  \r\n 30-157 Krakow ",
                            BankAccount = "992996466190013440",
                            CreationDate = new DateTime(2018, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1993, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentId = "456289753",
                            FirstName = "Wiktoria",
                            Gender = "Female",
                            LastName = "Winnicka",
                            ManagerId = 2,
                            PositionId = 4,
                            SalaryBonus = 200m,
                            VacationDays = 18
                        },
                        new
                        {
                            UserId = 16,
                            Address = "Sienna 7  \r\n 30-886 Krakow ",
                            BankAccount = "4552728910107363533",
                            CreationDate = new DateTime(2020, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1999, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentId = "1453678254",
                            FirstName = "Klaudia",
                            Gender = "Female",
                            LastName = "Grodziecka",
                            ManagerId = 5,
                            PositionId = 4,
                            SalaryBonus = 100m,
                            VacationDays = 17
                        },
                        new
                        {
                            UserId = 17,
                            Address = "Szwedzka 10  \r\n 30-156 Krakow ",
                            BankAccount = "4552672788864544422",
                            CreationDate = new DateTime(2017, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1992, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentId = "5462678927",
                            FirstName = "Marian",
                            Gender = "Male",
                            LastName = "Kolarski",
                            ManagerId = 4,
                            PositionId = 2,
                            SalaryBonus = 200m,
                            VacationDays = 23
                        },
                        new
                        {
                            UserId = 18,
                            Address = "Teligi 16/58  \r\n 30-836 Krakow ",
                            BankAccount = "934427891653222110",
                            CreationDate = new DateTime(2016, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1994, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentId = "6785432219",
                            FirstName = "Maciej",
                            Gender = "Male",
                            LastName = "Krakowski",
                            ManagerId = 3,
                            PositionId = 3,
                            SalaryBonus = 200m,
                            VacationDays = 24
                        },
                        new
                        {
                            UserId = 19,
                            Address = "Studencka 9/11  \r\n 30-550 Krakow ",
                            BankAccount = "251788992644448280",
                            CreationDate = new DateTime(2019, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1999, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentId = "5432224576",
                            FirstName = "Marlena",
                            Gender = "Female",
                            LastName = "Milewska",
                            ManagerId = 8,
                            PositionId = 6,
                            SalaryBonus = 100m,
                            VacationDays = 22
                        },
                        new
                        {
                            UserId = 20,
                            Address = "Poznanska 13  \r\n 30-432 Krakow ",
                            BankAccount = "6677829937654111",
                            CreationDate = new DateTime(2020, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2000, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentId = "3552789265",
                            FirstName = "Marcel",
                            Gender = "Male",
                            LastName = "Litewski",
                            ManagerId = 4,
                            PositionId = 2,
                            SalaryBonus = 100m,
                            VacationDays = 17
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HR_Portal.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("HR_Portal.Models.Department", b =>
                {
                    b.HasOne("HR_Portal.Models.User", "Director")
                        .WithMany()
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Director");
                });

            modelBuilder.Entity("HR_Portal.Models.Position", b =>
                {
                    b.HasOne("HR_Portal.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("HR_Portal.Models.Request", b =>
                {
                    b.HasOne("HR_Portal.Models.RequestType", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR_Portal.Models.User", "Requestor")
                        .WithMany()
                        .HasForeignKey("RequestorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR_Portal.Models.RequestStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestType");

                    b.Navigation("Requestor");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("HR_Portal.Models.TrainingDestination", b =>
                {
                    b.HasOne("HR_Portal.Models.Training", "Training")
                        .WithMany()
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR_Portal.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Training");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HR_Portal.Models.User", b =>
                {
                    b.HasOne("HR_Portal.Models.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("HR_Portal.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Manager");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HR_Portal.Models.ApplicationUser", b =>
                {
                    b.HasOne("HR_Portal.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
